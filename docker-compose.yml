version: "3.8"

services:
  pgsqldb:
    image: postgres
    env_file:
      - .env     
    ports:
      - 5432:5432    
    networks:
      - shared-network
    volumes:      
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 2048M
        

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx-prod
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - 80:80
  #   command: /bin/sh -c "nginx -g 'daemon off;'"
  #   depends_on:
  #     api-prod:
  #       condition: service_healthy      
  #   networks:
  #     - shared-network
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: 2048M

  api-prod:
    container_name: nestjs_api_prod
    image: nestjs-api-prod:1.0.0
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    #command: sh -c './bin/wait-for -t 0 pgsqldb:5432 -- npm start:prod'
    depends_on:
      pgsqldb:
        condition: service_healthy
    links:
      - pgsqldb
    networks:
      - shared-network
    ports:
      - 3000:3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "http://api-prod:3000"]
      interval: 5s
      timeout: 3s
      retries: 6
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 2048M

networks:
  shared-network:

volumes:  
  pgdata: